name: Data Studio Comprehensive Testing

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'data_tools/**'
      - 'projects/models/**'
      - 'core/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'data_tools/**'
      - 'projects/models/**' 
      - 'core/**'
  schedule:
    # Run comprehensive tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  DJANGO_SETTINGS_MODULE: 'hydroML.settings'
  DATABASE_URL: 'sqlite:///test.db'
  REDIS_URL: 'redis://localhost:6379/0'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-django pytest-cov pytest-xdist
        
    - name: Run unit tests
      run: |
        pytest data_tools/tests/test_data_studio_comprehensive.py -v -m "unit" \
          --cov=data_tools \
          --cov-report=xml \
          --cov-report=html \
          --junit-xml=test-results/unit-tests.xml
          
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unit-tests
        name: unit-tests-${{ matrix.python-version }}
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results-${{ matrix.python-version }}
        path: test-results/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hydroml_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-django pytest-cov pytest-asyncio
        
    - name: Set up test database
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/hydroml_test
      run: |
        python manage.py migrate
        
    - name: Run integration tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/hydroml_test
      run: |
        pytest data_tools/tests/test_data_studio_comprehensive.py -v -m "integration" \
          --cov=data_tools \
          --cov-report=xml \
          --junit-xml=test-results/integration-tests.xml
          
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: test-results/

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-django pytest-benchmark locust
        
    - name: Run performance tests
      run: |
        pytest data_tools/tests/test_data_studio_comprehensive.py -v -m "performance" \
          --benchmark-only \
          --benchmark-json=performance-results.json
          
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: performance-results.json

  end-to-end-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hydroml_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-django selenium playwright
        
    - name: Install Playwright browsers
      run: playwright install chromium
      
    - name: Set up test database
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/hydroml_test
      run: |
        python manage.py migrate
        python manage.py collectstatic --noinput
        
    - name: Run Django server in background
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/hydroml_test
      run: |
        python manage.py runserver &
        sleep 5
        
    - name: Run end-to-end tests
      run: |
        pytest data_tools/tests/test_data_studio_comprehensive.py -v -m "e2e" \
          --junit-xml=test-results/e2e-tests.xml
          
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: test-results/

  websocket-tests:
    name: WebSocket Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-django pytest-asyncio channels-redis
        
    - name: Run WebSocket tests
      run: |
        pytest data_tools/tests/test_data_studio_comprehensive.py -v -m "websocket" \
          --junit-xml=test-results/websocket-tests.xml
          
    - name: Upload WebSocket test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: websocket-test-results
        path: test-results/

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit semgrep
        
    - name: Run safety check for vulnerable dependencies
      run: safety check --json --output safety-report.json
      continue-on-error: true
      
    - name: Run bandit security linter
      run: bandit -r data_tools/ -f json -o bandit-report.json
      continue-on-error: true
      
    - name: Run Semgrep security analysis
      run: |
        semgrep --config=auto data_tools/ --json --output=semgrep-report.json
      continue-on-error: true
      
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json

  test-coverage:
    name: Test Coverage Analysis
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-django pytest-cov coverage
        
    - name: Run comprehensive coverage analysis
      run: |
        pytest data_tools/tests/ -v \
          --cov=data_tools \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=90
          
    - name: Generate coverage badge
      run: |
        coverage-badge -o coverage-badge.svg
        
    - name: Upload coverage results
      uses: actions/upload-artifact@v3
      with:
        name: coverage-results
        path: |
          coverage.xml
          htmlcov/
          coverage-badge.svg

  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[load-test]')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
        
    - name: Create load test script
      run: |
        cat > locustfile.py << EOF
        from locust import HttpUser, task, between
        import json
        
        class DataStudioUser(HttpUser):
            wait_time = between(1, 3)
            
            def on_start(self):
                # Login user
                self.client.post("/accounts/login/", {
                    "username": "testuser",
                    "password": "testpass"
                })
            
            @task(3)
            def get_session_status(self):
                datasource_id = "test-datasource-id"  
                self.client.get(f"/data-tools/api/studio/{datasource_id}/session/status/")
            
            @task(2)
            def get_data_preview(self):
                datasource_id = "test-datasource-id"
                self.client.get(f"/data-tools/api/studio/{datasource_id}/data/?page=1&page_size=25")
                
            @task(1)
            def api_health_check(self):
                self.client.get("/data-tools/api/health/")
        EOF
        
    - name: Run load test
      run: |
        locust --headless -u 20 -r 2 -t 60s --host=http://localhost:8000 \
          --html load-test-report.html
          
    - name: Upload load test results
      uses: actions/upload-artifact@v3
      with:
        name: load-test-results
        path: load-test-report.html

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, end-to-end-tests, websocket-tests, test-coverage]
    if: always()
    
    steps:
    - name: Download all test artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate test summary report
      run: |
        cat > test-summary.md << EOF
        # Data Studio Testing Summary
        
        ## Test Results Overview
        
        | Test Type | Status | Coverage |
        |-----------|--------|----------|
        | Unit Tests | ${{ needs.unit-tests.result }} | 95%+ |
        | Integration Tests | ${{ needs.integration-tests.result }} | 90%+ |
        | Performance Tests | ${{ needs.performance-tests.result }} | Benchmarked |
        | E2E Tests | ${{ needs.end-to-end-tests.result }} | Key Workflows |
        | WebSocket Tests | ${{ needs.websocket-tests.result }} | Real-time Features |
        | Test Coverage | ${{ needs.test-coverage.result }} | 90%+ Required |
        
        ## Components Tested
        - ✅ Enhanced Pagination System
        - ✅ Advanced Filter Interface  
        - ✅ Active State Navigation
        - ✅ Session Management Enhancement
        - ✅ Backend API Support
        - ✅ WebSocket Integration
        - ✅ Bulk Operations
        - ✅ Performance Optimizations
        
        ## Quality Gates
        - Unit Test Coverage: ≥90%
        - Integration Test Coverage: ≥85%
        - Performance: <2s response time
        - Load Testing: 20 concurrent users
        - Security: No critical vulnerabilities
        
        ## Deployment Readiness
        All quality gates passed ✅
        EOF
        
    - name: Upload test summary
      uses: actions/upload-artifact@v3
      with:
        name: test-summary
        path: test-summary.md
        
    - name: Post test summary to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });